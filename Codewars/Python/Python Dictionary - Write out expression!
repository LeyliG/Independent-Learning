"""
Math hasn't always been your best subject, and these programming symbols always trip you up!

I mean, does ** mean *"Times, Times"* or *"To the power of"*?

Luckily, you can create the function expression_out() to write out the expressions for you!

The operators you'll need to use are:

{ '+':   'Plus ',
  '-':   'Minus ',
  '*':   'Times ',
  '/':   'Divided By ',  
  '**':  'To The Power Of ',
  '=':   'Equals ',
  '!=':  'Does Not Equal ' }
These values will be stored in the preloaded dictionary OPERATORS just as shown above.

But keep in mind: INVALID operators will also be tested, to which you should return "That's not an operator!"

And all of the numbers will be 1 to10! Isn't that nice!

Here's a few examples to clarify:

expression_out("4 ** 9") == "Four To The Power Of Nine"
expression_out("10 - 5") == "Ten Minus Five"
expression_out("2 = 2")  == "Two Equals Two"
"""

# Python solution code 
def expression_out(exp):    
    exp = exp.split(" ")
    numbers = {1: "One", 2: "Two", 3: "Three", 4: "Four", 5: "Five", 6: "Six",
    7: "Seven", 8: "Eight", 9: "Nine", 10: "Ten"}
        
    if exp[1] in OPERATORS:
        exp0 = numbers[int(exp[0])]
        exp1 = OPERATORS[exp[1]]
        exp2 = numbers[int(exp[2])]
    else: 
        return "That's not an operator!"

    return  exp0 + " " + exp1 + exp2
    
    
# Sample tests
test.assert_equals(expression_out('1 + 3'),  'One Plus Three')
test.assert_equals(expression_out('2 - 10'), 'Two Minus Ten')
test.assert_equals(expression_out('6 ** 9'), 'Six To The Power Of Nine')
test.assert_equals(expression_out('5 = 5'),  'Five Equals Five')
test.assert_equals(expression_out('7 * 4'),  'Seven Times Four')
test.assert_equals(expression_out('2 / 2'),  'Two Divided By Two')
test.assert_equals(expression_out('8 != 5'), 'Eight Does Not Equal Five')

